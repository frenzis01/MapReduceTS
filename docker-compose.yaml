# version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    attach: false
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    attach: false
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - ./kafka_healthcheck.sh:/kafka_healthcheck.sh
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      # test: ["CMD-SHELL", "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"]
      # test: ["CMD-SHELL", "sh /kafka_healthcheck.sh"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0-M02-alpine
    attach: false
    container_name: redis
    ports:
      - "6379:6379"

  source:
    build:
      context: ./source
      dockerfile: Dockerfile
    container_name: source
    environment:
      GROUP_ID: source-group
    volumes:
      - ./input:/usr/src/app/input
    command: ["sh", "-c", "sleep 1 && node dist/index.js --source"]
    depends_on:
      kafka:
        condition: service_healthy

  mapper:
    build:
      context: ./worker
      dockerfile: Dockerfile
    # container_name: mapper
    environment:
      GROUP_ID: map-group
      # N_MAPPERS: ${N_MAPPERS} 
    command: ["sh", "-c", "sleep 2 && node dist/index.js --map"]
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      kafka:
        condition: service_healthy

  shuffler:
    build:
      context: ./worker
      dockerfile: Dockerfile
    # container_name: shuffler
    environment:
      GROUP_ID: shuffle-group
      # # N_MAPPERS: ${N_MAPPERS}
    command: ["sh", "-c", "sleep 2 && node dist/index.js --shuffle"]
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      kafka:
        condition: service_healthy

  reducer:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: reducer
    environment:
      GROUP_ID: reduce-group
    command: ["sh", "-c", "sleep 2 && node dist/index.js --reduce"]
    depends_on:
      kafka:
        condition: service_healthy

  sink:
    build:
      context: ./sink
      dockerfile: Dockerfile
    container_name: sink
    environment:
      GROUP_ID: sink-group
    volumes:
      - ./output:/usr/src/app/output
    command: ["sh", "-c", "sleep 2 && node dist/index.js --output"]
    depends_on:
      kafka:
        condition: service_healthy
